#snake game
import pygame
from pygame.locals import *
import time
import random                             

size=39
Background_colour=(255,255,255)

class Egg:
    def __init__(self, parent_screen):
        self.image = pygame.image.load("resources/egg.jpg").convert()
        self.parent_screen = parent_screen
        self.x=size*3
        self.y=size*3

    def draw(self):
        self.parent_screen.blit(self.image, (self.x, self.y))           #blit is used to draw the image
        pygame.display.flip()

    def move(self):
        self.x=random.randint(0,16)*size                    #generates a random number from 0 1o 17, as 663/39 i.e screen size by size of the egg gives the number of increments that can be done and multiply by the size so that it is a multiple of size and never exceeds 663
        self.y=random.randint(0,16)*size

        

class Snake:
    def __init__(self, parent_screen, length):         #we are storing parent_screen as a class member        
        self.parent_screen = parent_screen
        self.block = pygame.image.load("resources/snake 2.jpg").convert()                  #used to load the image
        self.direction = 'down'      #initializing the direction

        self.length=length
        self.x = [size]*length               # creates an array and multiplies it by the length because each block needs its own x and y axis T.S 39.15
        self.y = [size]*length
        

    def increase_length(self):
        self.length+=1
        self.x.append(-1)
        self.y.append(-1)
        pass

    def move_left(self):
        self.direction='left'

    def move_right(self):
        self.direction='right'

    def move_up(self):
        self.direction='up'

    def move_down(self):
        self.direction='down'


    def walk(self):

        for i in range(self.length-1,0,-1):       #a loop running in reverse direction to make the blocks take the position of previous blocks
            self.x[i]=self.x[i-1]
            self.y[i]=self.y[i-1]

        if self.direction == 'left':
            self.x[0]-=size
        if self.direction == 'right':
            self.x[0]+=size    
        if self.direction == 'up':
            self.y[0]-=size
        if self.direction == 'down':
            self.y[0]+=size    
        self.draw()

    def draw(self):
        self.parent_screen.fill(Background_colour)     # if this line is not present the previous blocks remain on the screen, this clears the screen
        for i in range(self.length):              # as we use multiply blocks
            self.parent_screen.blit(self.block, (self.x[i], self.y[i]))           #blit is used to draw the image
        pygame.display.flip()



class Game:
    def __init__(self):                                                     #defining class
        pygame.init()                                                       #initialise pygame
        self.surface = pygame.display.set_mode((663, 663))                  #initialse widow for display     surface is the main window
        self.snake = Snake(self.surface,2)                                    # self is used to make it a member of a class
        self.snake.draw()
        self.egg = Egg(self.surface)
        self.egg.draw()


    def restart(self):
        self.snake = Snake(self.surface,2)                                    # self is used to make it a member of a class
        self.egg = Egg(self.surface)


    def is_collision(self, x1,y1,x2,y2):
        if x1 >= x2 and x1 < x2+size:
            if y1 >= y2 and y1 < y2+size:
                return True
        
        return False


    def display_score(self):
        font = pygame.font.SysFont('arial',25)
        score=font.render(f"Score: {self.snake.length}", True, (0,0,0))
        self.surface.blit(score, (570,15))                       #remember blit is used whever u want to show something on the surface
        


    def play(self):
        self.snake.walk()          #used to move the snake
        self.egg.draw()
        self.display_score()
        pygame.display.flip()

        #snake eating the egg
        if self.is_collision(self.snake.x[0], self.snake.y[0],self.egg.x, self.egg.y):
            self.snake.increase_length()
            self.egg.move()


        #snake colliding with itself
        for i in range(1,self.snake.length):
            if self.is_collision(self.snake.x[0], self.snake.y[0], self.snake.x[i], self.snake.y[i]):
                raise "Game Over"
    


    def show_game_over(self):
        self.surface.fill(Background_colour)
        font = pygame.font.SysFont('arial',25)
        line1=font.render(f"Game is Over !!, Your Score is: {self.snake.length}", True, (0,0,0))
        self.surface.blit(line1, (100,275))
        line2=font.render("To play again press Enter, to exit press esc.", True, (0,0,0))
        self.surface.blit(line2, (100,325))
        pygame.display.flip()





    def run(self):
        running = True
        pause=False

        while running:
            for event in pygame.event.get():                        #accept events of any input like keyboard or mouse
                if event.type == KEYDOWN:              #keydown is from the pygame.locals import *
                    if event.key == K_ESCAPE:
                        running = False

         
                    if event.key == K_RETURN:                #to restart the game with enter
                        pause=False

                    if event.key == K_LEFT:            #changing the movement of the block in the axis
                        self.snake.move_left()

                    if event.key == K_RIGHT:
                        self.snake.move_right()

                    if event.key == K_UP:
                        self.snake.move_up()
                    if event.key == K_DOWN:
                        self.snake.move_down()

                elif event.type == QUIT:                 # quit is generated when we click close
                    running = False

            try:
                if not pause:
                    self.play()
            except Exception as e:
                self.show_game_over()
                pause = True
                self.restart()
            time.sleep(.25)           # every 0.2 seconds it moves on its own
            



if __name__ == '__main__':            #routine in python
    game = Game()
    game.run()
